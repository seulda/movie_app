{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","routes/Detail.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","About","props","console","log","Navigation","Detail","location","history","undefined","push","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"2WA0CeA,MApCf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OACI,qBAAKC,UAAU,QAAf,SACI,eAAC,IAAD,CACIC,GAAI,CACAC,SAAU,gBACVC,MAAO,CAAEP,OAAMD,QAAOE,UAASC,SAAQC,WAH/C,UAMI,qBAAKK,IAAKN,EAAQO,IAAKV,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,gBAAd,SACKD,EAAOO,KAAI,SAACC,EAAOC,GAChB,OAAO,oBAAgBR,UAAU,eAA1B,SAA0CO,GAAjCC,QAIxB,oBAAGR,UAAU,iBAAb,UAA+BH,EAAQY,MAAM,EAAG,KAAhD,kBC0CLC,G,kNA5DbP,MAAQ,CACNQ,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAOAC,IAAMC,IAAI,4DAPV,gBAKEJ,EALF,EAIRK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAVzB,2C,uDAcZ,WAEEQ,KAAKN,c,oBAKP,WACE,MAA8BM,KAAKhB,MAA3BQ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACE,yBAASZ,UAAU,YAAnB,SACGW,EACC,qBAAKX,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,6BAGA,qBAAKA,UAAU,SAAf,SAEIY,EAAON,KAAI,SAACc,GACV,OACE,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZD,MAAOyB,EAAMzB,MACbE,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,QANTqB,EAAMC,e,GA1CdE,IAAMC,Y,MCUVC,MAZf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GAER,sBAAK1B,UAAU,mBAAf,UACI,qIAGA,6D,MCKG6B,MAXf,WACI,OACI,sBAAK7B,UAAU,MAAf,UACI,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uBC0BG6B,E,uKAnBX,WAEI,MAA8BX,KAAKO,MAA3BK,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAEIC,GAAlBF,EAAS5B,OACT6B,EAAQE,KAAK,O,oBAIrB,WACI,IAAQH,EAAaZ,KAAKO,MAAlBK,SACR,OAAIA,EAAS5B,MACF,+BAAO4B,EAAS5B,MAAMR,QAEtB,S,GAfE4B,IAAMC,WCcZW,MAXf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,cAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWb,IAChC,cAAC,IAAD,CAAOW,KAAK,gBAAgBE,UAAWR,QCnB7CS,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.dc713ee7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport { Link } from 'react-router-dom';\n\n// Movie 컴포넌트는 state가 필요하지 않기 때문에 함수형 컴포넌트로 작성\nfunction Movie({ title, year, summary, poster, genres }) {\n    return (\n        <div className=\"movie\">\n            <Link\n                to={{\n                    pathname: '/movie-detail',\n                    state: { year, title, summary, poster, genres },\n                }}\n            >\n                <img src={poster} alt={title} title={title} />\n                <div className=\"movie__data\">\n                    <h3 className=\"movie__title\">{title}</h3>\n                    <h5 className=\"movie__year\">{year}</h5>\n                    <ul className=\"movie__genres\">\n                        {genres.map((genre, index) => {\n                            return <li key={index} className=\"movie__genre\">{genre}</li>\n                        })}\n                    </ul>\n                    {/* [문자열].slice(시작, 끝) : 문자열 글자수 제한 */}\n                    <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n                </div>\n            </Link>\n        </div>\n    );\n}\n\n// Movie에 넘어오는 영화 데이터를 정의하고 관리하기 위해 prop-types 사용\n// isRequired : 필수 값\nMovie.propTypes = { \n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\nimport './Home.css';\n\nclass Home extends React.Component {\n\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    // getMovies 함수는 시간이 필요하다는 것을 async로 표시, 실행 시간이 필요한 대상에 await 표시\n    // axios.get() 함수의 인자에 URL을 전달하여 API를 호출하고, 그 데이터를 할당 (구조분해할당)\n    const {\n      data: {\n        data: { movies },\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?soty_by=rating\");\n    // this.setState({ movies: movies }); 왼쪽 movies는 state, 오른쪽 movies는 구조분해할당으로 얻은 데이터 변수\n    // 객체 키와 대입 변수 이름이 같으면 축약 가능(movies)\n    this.setState({ movies, isLoading: false });\n  }\n\n  // Mount로 분류하는 생명주기 함수 3가지(순서별) : 1.constructor()함수 -> 2.render()함수 -> 3.componentDidMount()함수\n  componentDidMount() {\n    // 영화 데이터 로딩!\n    this.getMovies();\n  }\n\n  // class가 아닌 className으로 작성하는 이유 : HTML의 class와 Javascript의 class라는 이름이 겹치면 react가 혼란.\n  // react는 JSX를 HTML로 변환하면서 className을 class로 다시 바꿈\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">'Loading...' </span>\n          </div>\n          ) : (\n            <div className=\"movies\">\n              {\n                movies.map((movie) => {\n                  return (\n                    <Movie \n                      key={movie.id}\n                      id={movie.id}\n                      year={movie.year}\n                      title={movie.title}\n                      summary={movie.summary}\n                      poster={movie.medium_cover_image}\n                      genres={movie.genres}\n                    />\n                  );\n                })\n              }\n            </div>\n          )\n        }\n      </section>\n    );\n  }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport './About.css';\n\nfunction About(props) {\n    console.log(props);\n    return (\n        <div className=\"about__container\">\n            <span>\n                \"Freedom is the freedom to say that two plus two make four. If that is granted, all else follws.\"\n            </span>\n            <span>- George Orwell, 1984</span>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navigation.css';\n\nfunction Navigation() {\n    return (\n        <div className=\"nav\">\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n            {/* <Link to={{ pathname: '/about', state: { fromNavigation: true } }}>About</Link> */}\n            {/* pathname은 URL, state는 route props에 보내줄 데이터 */}\n        </div>\n    );\n}\n\nexport default Navigation;","import React from 'react';\n\n// function Detail(props) {\n//     console.log(props);\n//     return <span>hello</span>;\n// }\n\n// Detail 컴포넌트를 class형 컴포넌트로 변경\n//    : componentDidMount() 생명주기 함수를 사용하여, Detail 컴포넌트가 마운트될 때 push() 함수 실행\n\n// Detail 컴포넌트는 [render() -> componentDidMount()]의 순서로 함수를 실행하기 때문에 리다이렉트 기능이 동작하지 않음\n//    = render() 함수 내에서 location.state.title을 사용하려 하는데 location.state가 undefined\n//   >> render() 함수에도 componentDidMount() 생명주기 함수에 작성한 리다이렉트 코드를 추가해 주어야 함.\n\nclass Detail extends React.Component {\n    componentDidMount() {\n        // 구조분해할당 사용\n        const { location, history } = this.props;\n        // location state가 없는 경우 /경로(home)로 이동시킴\n        if (location.state == undefined) {\n            history.push('/');\n        }\n    }\n\n    render() {\n        const { location } = this.props;\n        if (location.state) {\n            return <span>{location.state.title}</span>;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Detail;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Navigation from './components/Navigation';\nimport Detail from './routes/Detail';\n\n// route props : 라우팅 대상이 되는 컴포넌트에 넘겨주는 기본 props. 직접 넘겨주지 않아도 기본으로 넘어가는 정보\n// Route에는 2가지의 props를 전달할 수 있음 >> 1-URL을 위한 path props, 2-URL에 맞는 컴포넌트를 불러주기 위한 component props\n// exact={true} : path props가 정확히 그 path인 경우에만 출력되도록 하는 속성\n// route props의 history 키는 URL을 변경해주는 함수들이 있음. push, go, goBack, goForward가 있음. \n// history > push() : 지정한 URL로 리다이렉트\n\n// a 엘리먼트의 href 속성은 페이지 전체를 다시 그리기 때문에, 필요한 부분만 다시 그려주는 react의 장점을 활용하기 힘듬 >> Link 컴포넌트 사용\n// Link, Router 컴포넌트는 반드시 HashRouter 안에 포함되어야함\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie-detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}